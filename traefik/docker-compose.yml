version: '3.7'

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      --providers.docker=true
      --api.insecure=true 
      --log.filePath=/var/log/traefik/traefik.log
      --log.level=DEBUG
      --accesslog=true
      --accesslog.filepath=/var/log/traefik/access.log
      --tracing.jaeger=true
      --tracing.jaeger.propagation=jaeger
      --tracing.jaeger.collector.endpoint=http://10.1.2.48:14268/api/traces?format=jaeger.thrift
      --experimental.plugins.traefik-api-key-middleware.modulename=github.com/dtomlinson91/traefik-api-key-middleware
      --experimental.plugins.traefik-api-key-middleware.version=v0.1.2
      --experimental.plugins.AddForwardedHeader.moduleName=github.com/jerrywoo96/AddForwardedHeader
      --experimental.plugins.AddForwardedHeader.version=v1.0.1
      # --api.dashboard=true
      # --entrypoints.http.address=:80


    restart: "always"
    ports:
      # The HTTP port
      - "7777:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8888:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/var/log/traefik

    networks:
        - traefik-networks


      # traefik.enable: true
      # traefik.frontend.rule: PathPrefix(`/xxx`)
      # # get md5 from htpasswd or http://www.htaccesstools.com/htpasswd-generator/
      # # and then double all $ to $$ to avoid docker-compose 
      # traefik.frontend.auth.basic: "admin:$$apr1$$ew5qgo9d$$KfzaFvWP4uRnyHvCwr6C7."


  wsrs-v3:
    image: parinyacoj/wsrs-api-v3:tag
    restart: "always"
    ports:
    - "10001:9000"  
    #scaling  
    # ports:  
    #   - "10001-10010:9000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wsrs-v3.rule=Host(`wsrs-v3.docker.localhost`)"
    networks:
        - traefik-networks

  case-gateway:
    image: dockerhub.coj.intra/case-gateway:1.1.2
    restart: "always"
    # ports:
    # - "9003:9003"  
    # >> scaling  
    # >>  docker-compose up -d --scale case-gateway=2
    ports:  
       - "10002:9003"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.case-gateway.rule=(Host(`coj-x.coj.intra`) && Path(`/labor`)) || PathPrefix(`/labor`)"
      
      - "traefik.http.routers.case-gateway.middlewares=regEx,apiKeyLB,forwardedHeaders"
      - "traefik.http.middlewares.regEx.replacepathregex.regex=^/labor(.*)"
      - "traefik.http.middlewares.regEx.replacepathregex.replacement=/api/v1$${1}"


      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.authenticationHeader=true"
      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.authenticationheaderName=X-API-KEY"
      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.bearerHeader=true"
      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.bearerHeaderName=Authorization"
      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.removeHeadersOnSuccess=true"
      - "traefik.http.middlewares.apiKeyLB.plugin.traefik-api-key-middleware.keys=ff08048b-ebf9-4dca-b3bd-2935738dd108"  

      # ADD HEADER# Use the forwarded middleware
      - "traefik.http.middlewares.forwardedHeaders.headers.customrequestheaders.system_id=1"
      - "traefik.http.middlewares.forwardedHeaders.headers.customrequestheaders.system_code=LABOR"
      - "traefik.http.middlewares.forwardedHeaders.headers.customrequestheaders.*=true" # Attach the middleware to your app
    networks:
        - traefik-networks

  #sหมายบังคับคดี
  exwar-gateway:
    image: dockerhub.coj.intra/case-gateway:1.1.2
    restart: "always"
    # ports:
    # - "9003:9003"  
    # >> scaling  
    # >>  docker-compose up -d --scale case-gateway=2
    ports:  
       - "10004:9003"
    labels:
      - "traefik.enable=true"
      #- "traefik.http.routers.exwar-gateway.rule=Host(`exwar-gateway.docker.localhost`) || Host(`coj-x.coj.intra`) ||  PathPrefix(`/exwar`)"
      - "traefik.http.routers.exwar-gateway.rule=(Host(`coj-x.coj.intra`) && Path(`/exwar`)) || PathPrefix(`/exwar`)"
      - "traefik.http.routers.exwar-gateway.middlewares=regExEW,apiKeyEW,forwardedHeadersEW"
      - "traefik.http.middlewares.regExEW.replacepathregex.regex=^/exwar(.*)"
      - "traefik.http.middlewares.regExEW.replacepathregex.replacement=/api/v1$${1}"


      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.authenticationHeader=true"
      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.authenticationheaderName=X-API-KEY"
      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.bearerHeader=true"
      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.bearerHeaderName=Authorization"
      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.removeHeadersOnSuccess=true"
      - "traefik.http.middlewares.apiKeyEW.plugin.traefik-api-key-middleware.keys=b8e471ed-9f78-4b0e-9f0d-ba3c9339f3b6"  

      # ADD HEADER# Use the forwarded middleware
      - "traefik.http.middlewares.forwardedHeadersEW.headers.customrequestheaders.system_id=2"
      - "traefik.http.middlewares.forwardedHeadersEW.headers.customrequestheaders.system_code=EXWAR"
      - "traefik.http.middlewares.forwardedHeadersEW.headers.customrequestheaders.*=true" # Attach the middleware to your app
    networks:
        - traefik-networks

  inheritance-service:
    image: dockerhub.coj.intra/inheritance-service:1.0.3
    restart: "always"
    # ports:
    # - "9003:9003"  
    # >> scaling  
    # >>  docker-compose up -d --scale case-gateway=2
    ports:  
       - "10003:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inheritance-service.rule=(Host(`coj-x.coj.intra`) && Path(`/inherit`)) || PathPrefix(`/inherit`)"
      
      - "traefik.http.routers.inheritance-service.middlewares=regExIHT,apiKeyIHT"
      - "traefik.http.middlewares.regExIHT.replacepathregex.regex=^/inherit(.*)"
      - "traefik.http.middlewares.regExIHT.replacepathregex.replacement=/api/v1$${1}"


      #API-KEY AUTHEN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.authenticationHeader=true"
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.authenticationheaderName=X-API-KEY"
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.bearerHeader=true"
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.bearerHeaderName=Authorization"
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.removeHeadersOnSuccess=true"
      - "traefik.http.middlewares.apiKeyIHT.plugin.traefik-api-key-middleware.keys=b8e471ed-9f78-4b0e-9f0d-ba3c9339f3b6,ff08048b-ebf9-4dca-b3bd-2935738dd108"  
    networks:
        - traefik-networks

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
        #scaling  
    ports:  
      - target: 80  #auto port
    restart: "always"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=(Host(`coj-x.coj.intra`) && Path(`/whoami`)) || PathPrefix(`/whoami`)"
    networks:
        - traefik-networks

  go-hello:
    # A container that exposes an API to show its IP address
    image: dockerhub.coj.intra/go-hello:1.0
    ports:  
      - target: 8000  #auto port
        #scaling  
    restart: "always"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-hello.rule=(Host(`coj-x.coj.intra`) && Path(`/go-hello`)) || PathPrefix(`/go-hello`)"
      - "traefik.http.routers.go-hello.middlewares=regExGHL"
      - "traefik.http.middlewares.regExGHL.replacepathregex.regex=^/go-hello(.*)"
      - "traefik.http.middlewares.regExGHL.replacepathregex.replacement=/hello$${1}"
    networks:
        - traefik-networks

  strapi:
    image: strapi/strapi:latest # Use the appropriate Strapi version
    container_name: strapi
    environment:
      - DATABASE_CLIENT=sqlite
      - DATABASE_NAME=/usr/src/api/data/db.sqlite
      - NODE_ENV=production
    volumes:
      - ./strapi-app:/usr/src/api
    ports:
      - "9010:1337"
    labels:
      - traefik.enable=true
      - traefik.http.routers.strapi.rule=PathPrefix(`/strapi`) # Change to your domain     
      - traefik.http.routers.strapi.middlewares=regExSAPI
      - traefik.http.middlewares.regExSAPI.replacepathregex.regex=^/strapi(.*)
      - traefik.http.middlewares.regExSAPI.replacepathregex.replacement=$${1}
      # - traefik.http.middlewares.autodetect.contenttype.autodetect=false
    networks:
        - traefik-networks

networks:
  traefik-networks:
    driver: bridge
